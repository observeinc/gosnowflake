//out.Value: false// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gosnowflake

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson90b16446DecodeGosnowflake(in *jlexer.Lexer, out *execResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			easyjson90b16446DecodeGosnowflake1(in, &out.Data)
		case "message":
			out.Message = string(in.String())
		case "code":
			out.Code = string(in.String())
		case "success":
			out.Success = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGosnowflake(out *jwriter.Writer, in execResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		easyjson90b16446EncodeGosnowflake1(out, in.Data)
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v execResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson90b16446EncodeGosnowflake(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v execResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson90b16446EncodeGosnowflake(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *execResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson90b16446DecodeGosnowflake(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *execResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson90b16446DecodeGosnowflake(l, v)
}
func easyjson90b16446DecodeGosnowflake1(in *jlexer.Lexer, out *execResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]nameValueParameter, 0, 2)
					} else {
						out.Parameters = []nameValueParameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v1 nameValueParameter
					easyjson90b16446DecodeGosnowflake2(in, &v1)
					out.Parameters = append(out.Parameters, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rowtype":
			if in.IsNull() {
				in.Skip()
				out.RowType = nil
			} else {
				in.Delim('[')
				if out.RowType == nil {
					if !in.IsDelim(']') {
						out.RowType = make([]execResponseRowType, 0, 0)
					} else {
						out.RowType = []execResponseRowType{}
					}
				} else {
					out.RowType = (out.RowType)[:0]
				}
				for !in.IsDelim(']') {
					var v2 execResponseRowType
					easyjson90b16446DecodeGosnowflake3(in, &v2)
					out.RowType = append(out.RowType, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rowset":
			if in.IsNull() {
				in.Skip()
				out.RowSet = nil
			} else {
				in.Delim('[')
				if out.RowSet == nil {
					if !in.IsDelim(']') {
						out.RowSet = make([][]*string, 0, 2)
					} else {
						out.RowSet = [][]*string{}
					}
				} else {
					out.RowSet = (out.RowSet)[:0]
				}
				for !in.IsDelim(']') {
					var v3 []*string
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						in.Delim('[')
						if v3 == nil {
							if !in.IsDelim(']') {
								v3 = make([]*string, 0, 8)
							} else {
								v3 = []*string{}
							}
						} else {
							v3 = (v3)[:0]
						}
						for !in.IsDelim(']') {
							var v4 *string
							if in.IsNull() {
								in.Skip()
								v4 = nil
							} else {
								if v4 == nil {
									v4 = new(string)
								}
								*v4 = string(in.String())
							}
							v3 = append(v3, v4)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.RowSet = append(out.RowSet, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		case "returned":
			out.Returned = int64(in.Int64())
		case "queryId":
			out.QueryID = string(in.String())
		case "sqlState":
			out.SQLState = string(in.String())
		case "databaseProvider":
			out.DatabaseProvider = string(in.String())
		case "finalDatabaseName":
			out.FinalDatabaseName = string(in.String())
		case "finalSchemaName":
			out.FinalSchemaName = string(in.String())
		case "finalWarehouseName":
			out.FinalWarehouseName = string(in.String())
		case "finalRoleName":
			out.FinalRoleName = string(in.String())
		case "numberOfBinds":
			out.NumberOfBinds = int(in.Int())
		case "statementTypeId":
			out.StatementTypeID = int64(in.Int64())
		case "version":
			out.Version = int64(in.Int64())
		case "chunks":
			if in.IsNull() {
				in.Skip()
				out.Chunks = nil
			} else {
				in.Delim('[')
				if out.Chunks == nil {
					if !in.IsDelim(']') {
						out.Chunks = make([]execResponseChunk, 0, 1)
					} else {
						out.Chunks = []execResponseChunk{}
					}
				} else {
					out.Chunks = (out.Chunks)[:0]
				}
				for !in.IsDelim(']') {
					var v5 execResponseChunk
					easyjson90b16446DecodeGosnowflake4(in, &v5)
					out.Chunks = append(out.Chunks, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "qrmk":
			out.Qrmk = string(in.String())
		case "chunkHeaders":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ChunkHeaders = make(map[string]string)
				} else {
					out.ChunkHeaders = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.ChunkHeaders)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "getResultUrl":
			out.GetResultURL = string(in.String())
		case "progressDesc":
			out.ProgressDesc = string(in.String())
		case "queryAbortsAfterSecs":
			out.QueryAbortTimeout = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGosnowflake1(out *jwriter.Writer, in execResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v7, v8 := range in.Parameters {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson90b16446EncodeGosnowflake2(out, v8)
			}
			out.RawByte(']')
		}
	}
	if len(in.RowType) != 0 {
		const prefix string = ",\"rowtype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v9, v10 := range in.RowType {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson90b16446EncodeGosnowflake3(out, v10)
			}
			out.RawByte(']')
		}
	}
	if len(in.RowSet) != 0 {
		const prefix string = ",\"rowset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.RowSet {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v13, v14 := range v12 {
						if v13 > 0 {
							out.RawByte(',')
						}
						if v14 == nil {
							out.RawString("null")
						} else {
							out.String(string(*v14))
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	if in.Returned != 0 {
		const prefix string = ",\"returned\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Returned))
	}
	if in.QueryID != "" {
		const prefix string = ",\"queryId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QueryID))
	}
	if in.SQLState != "" {
		const prefix string = ",\"sqlState\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SQLState))
	}
	if in.DatabaseProvider != "" {
		const prefix string = ",\"databaseProvider\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DatabaseProvider))
	}
	if in.FinalDatabaseName != "" {
		const prefix string = ",\"finalDatabaseName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FinalDatabaseName))
	}
	if in.FinalSchemaName != "" {
		const prefix string = ",\"finalSchemaName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FinalSchemaName))
	}
	if in.FinalWarehouseName != "" {
		const prefix string = ",\"finalWarehouseName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FinalWarehouseName))
	}
	if in.FinalRoleName != "" {
		const prefix string = ",\"finalRoleName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FinalRoleName))
	}
	if in.NumberOfBinds != 0 {
		const prefix string = ",\"numberOfBinds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NumberOfBinds))
	}
	if in.StatementTypeID != 0 {
		const prefix string = ",\"statementTypeId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StatementTypeID))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if len(in.Chunks) != 0 {
		const prefix string = ",\"chunks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Chunks {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjson90b16446EncodeGosnowflake4(out, v16)
			}
			out.RawByte(']')
		}
	}
	if in.Qrmk != "" {
		const prefix string = ",\"qrmk\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Qrmk))
	}
	if len(in.ChunkHeaders) != 0 {
		const prefix string = ",\"chunkHeaders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.ChunkHeaders {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if in.GetResultURL != "" {
		const prefix string = ",\"getResultUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GetResultURL))
	}
	if in.ProgressDesc != "" {
		const prefix string = ",\"progressDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ProgressDesc))
	}
	if in.QueryAbortTimeout != 0 {
		const prefix string = ",\"queryAbortsAfterSecs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.QueryAbortTimeout))
	}
	out.RawByte('}')
}
func easyjson90b16446DecodeGosnowflake4(in *jlexer.Lexer, out *execResponseChunk) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "rowCount":
			out.RowCount = int(in.Int())
		case "uncompressedSize":
			out.UncompressedSize = int64(in.Int64())
		case "compressedSize":
			out.CompressedSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGosnowflake4(out *jwriter.Writer, in execResponseChunk) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"rowCount\":"
		out.RawString(prefix)
		out.Int(int(in.RowCount))
	}
	{
		const prefix string = ",\"uncompressedSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.UncompressedSize))
	}
	{
		const prefix string = ",\"compressedSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompressedSize))
	}
	out.RawByte('}')
}
func easyjson90b16446DecodeGosnowflake3(in *jlexer.Lexer, out *execResponseRowType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "byteLength":
			out.ByteLength = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "precision":
			out.Precision = int64(in.Int64())
		case "scale":
			out.Scale = int64(in.Int64())
		case "nullable":
			out.Nullable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGosnowflake3(out *jwriter.Writer, in execResponseRowType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"byteLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.ByteLength))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int64(int64(in.Length))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"precision\":"
		out.RawString(prefix)
		out.Int64(int64(in.Precision))
	}
	{
		const prefix string = ",\"scale\":"
		out.RawString(prefix)
		out.Int64(int64(in.Scale))
	}
	{
		const prefix string = ",\"nullable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Nullable))
	}
	out.RawByte('}')
}
func easyjson90b16446DecodeGosnowflake2(in *jlexer.Lexer, out *nameValueParameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson90b16446EncodeGosnowflake2(out *jwriter.Writer, in nameValueParameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}
